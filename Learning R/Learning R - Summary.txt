swirl()

R Programming course:
##########################

1 & 2. Basics and working directories and files:
-----------------------
setwd and getwd
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
ls()
dir() ==== list.files()
file.exist(...)
args(name func)
?name func

3. Sequences on numbers:
-----------------------
sequence numbers 1:20 
pi:10(for real numbers) The upper limit of 10 is never reached, since the next number in our sequence would be greater than 10.

?`:` enclose the symbol in backticks

seq(1, 20) seq(0, 10, by=0.5) seq(0, 10, length=30)

1:length(my_seq) seq(along.with=my_seq) seq_along(my_seq)

rep(0, times=40)
rep(c(0, 1, 2), times=10)
rep(c(0, 1, 2), each=10)

4. Vectors:
-----------------------
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
[1]  TRUE FALSE  TRUE FALSE

my_char <- c('My', 'name', 'is')
paste(my_char, collapse = ' ')
[1] "My name is"
paste("Hello", "world!", sep = " ")
[1] "Hello world!"
paste(1:3, c("X", "Y", "Z"), sep = "")
[1] "1X" "2Y" "3Z"
paste(LETTERS, 1:4, sep = "-")

5. Missing Values:
-----------------------
NA : Not available
NAN: Not a number
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
sum(my_na) 
[1] 49

6. Subsetting Vectors:
-----------------------
y <- x[!is.na(x)]
y[y > 0]
x[!is.na(x) & x > 0]
R uses 'one-based indexing'
x[c(3, 5, 7)]
x[c(-2, -10)]
x[-c(2, 10)]
ect <- c(foo = 11, bar = 2, norf = NA)
vect
 foo  bar norf 
  11    2   NA 
names(vect)
[1] "foo"  "bar"  "norf"
identical(vect, vect2)

7. Matrices and Data frames
-----------------------
The main difference, as you'll see, is that matrices can only contain a single class of data, while data frames can
| consist of many different classes of data.
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
attributes(my_vector)
$`dim`
[1] 4 5
class(my_vector)
[1] "matrix"
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
class(my_data)
[1] "data.frame"
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames

-------------------------
Ctrl+1 — Move focus to the Source Editor.
Ctrl+2 — Move focus to the Console.
Ctrl+L — Clear the Console.
Esc — Interrupt R.
-------------------------

------------------------------
8: Logic
--------------------------
== != < <= > >= AND: | & && OR: | ||
All AND operators are evaluated before OR operators.

Which of the following evaluates to TRUE?
1: !isTRUE(4 < 3)
2: !isTRUE(8 != 5)
3: isTRUE(!TRUE)
4: isTRUE(NA)
5: isTRUE(3)
Selection: 1

identical()
xor(5 == 6, !FALSE)

ints <- sample(10)
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)

------------------------------
9: Functions 
------------------------------
Sys.Date()

mean(c(2, 4, 5))

boring_function <- function(x) {
  x
}

boring_function('My first function!')

boring_function

my_mean <- function(my_vector) {
  mn <- sum(my_vector) / length(my_vector)
  mn
  # Remember: the last expression evaluated will be returned! 
}

remainder <- function(num, divisor = 2) {
  rm <- num %% divisor
  rm
}

remainder(5)
remainder(11, 5)
remainder(num = 5, divisor = 11)
remainder(divisor = 11, num = 5) 
remainder(4, div = 2)  # R can also partially match arguments.

args(remainder)  # you can pass functions as arguments!

evaluate <- function(func, dat){
  func(dat)
}

evaluate(sd, c(1.4, 3.6, 7.9, 8.8))

evaluate(function(x){x+1}, 6)

evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[-1]}, c(8, 4, 0))

paste("Programming", "is", "fun!")

telegram <- function(...){
  paste("START", ..., "STOP")
}

mad_libs <- function(...){
  args <- list(...)
  
  place <- args[["place"]]
  noun <- args[["noun"]]
  adjective <- args[["adjective"]]
  
  paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", 
        noun, "being installed on campus.")
}

mad_libs(place="pppp", adjective="aaa", noun="king")

"%mult_add_one%" <- function(left, right){ # Notice the quotation marks!
  left * right + 1
}

"%p%" <- function(left, right){  # "Good" %p% "job!"
  paste(left, right)
}

"I" %p% "love" %p% "R"

------------------------------
10: lapply and sapply
------------------------------
# lapply() and sapply() functions apply an operation over the elements of a list
# lapply() always returns a list, whereas sapply() attempts to simplify the result
head(flags)
dim(flags)
View(flags)
class(flags)

# The lapply() function takes a list as input, applies a function to each element of the list, 
# then returns a list of the same length as the original one.
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)

cls_vect <- sapply(flags, class)
class(cls_vect)

sum(flags$orange)

flag_colors <- flags[, 11:17]
flag_colors
head(flag_colors)

lapply(flag_colors, sum) # output is a list
sapply(flag_colors, sum) # simplify the result to vector
sapply(flag_colors, mean)

flag_shapes <- flags[, 19:23]

lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)

unique(c(3, 4, 5, 5, 5, 6, 6))

unique_vals <- lapply(flags, unique)
unique_vals

sapply(unique_vals, length)

sapply(flags, unique)

lapply(unique_vals, function(elem) elem[2]) # Our function has no name and disappears as soon as lapply() is done using it. So-called
| 'anonymous functions'

------------------------------
11: vapply and tapply
------------------------------
# lapply() and sapply() functions apply an operation over the elements of a list
head(flags)
dim(flags)
View(flags)
class(flags)
summary(flags)
str(flags)

# return a list containing one vector of unique values for each column of the flags dataset
sapply(flags, unique)1

vapply(flags, unique, numeric(1))

sapply(flags, class)
vapply(flags, class, character(1))
# You might think of vapply() as being 'safer' than sapply(), since it requires you to specify the format of the output
# in advance, instead of just allowing R to 'guess' what you wanted.

?tapply
table(flags$landmass)
table(flags$animate)

# the proportion of flags containing an animate image WITHIN each landmass group
tapply(flags$animate, flags$landmass, mean)

# summary of population values (in round millions) for countries with and without the color red on their flag
tapply(flags$population, flags$red, summary)

tapply(flags$population, flags$landmass, summary)

# vapply() as a safer alternative to sapply()
# tapply() to split your data into groups based on the value of some variable, then apply a function to each group

------------------------------
12: Looking at Data
------------------------------
rm(list=ls())

ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants) # space the dataset is occupying in memory
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
# summary() provides different output for each variable, depending on its class. For numeric data such as Precip_Min,
# | summary() displays the minimum, 1st quartile, median, mean, 3rd quartile, and maximum. These values help us understand
# | how the data are distributed.

# For categorical variables (called 'factor' variables in R), summary() displays the number of times each value (or
# | 'level') occurs in the data.

table(plants$Active_Growth_Period)

str(plants)
# Any time you want to understand the structure of something (a dataset, function, etc.), str() is a good place to start

------------------------------
13: Simulation
------------------------------
x <- 1:10
sample(x)
sample(x, replace = TRUE)
sample(x[x >  8])
sample(1:6, 4)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)

LETTERS
sample(LETTERS)

flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)

?rbinom
# Each probability distribution in R has an r*** function (for "random"), a d*** function (for
| "density"), a p*** (for "probability"), and q*** (for "quantile").

rbinom(1, size = 100, prob = 0.7) # it is the same like the line above

flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)

?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)

rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois

cm <- colMeans(my_pois)
cm
hist(cm)

------------------------------
14: Dates and Times
------------------------------
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)

t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min

weekdays(d1)
months(t1)
quarters(t2)

t3 <- "Oktober 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
unclass(t4)

Sys.time() > t1
Sys.time() - t1

difftime(Sys.time(), t1, units = 'days') # find the amount of time in DAYS that has passed since you created t1.
lubridate package by Hadley Wickham

------------------------------
15: Base Graphics
------------------------------
http://varianceexplained.org/r/teach_ggplot2_to_beginners/

data(cars)

?cars
head(cars)
plot(cars)
# As always, R tries very hard to give you something sensible given the information that you
| have provided to it. First, R notes that the data frame you have given it has just two
| columns, so it assumes that you want to plot one column versus the other.

# Second, since we do not provide labels for either axis, R uses the names of the columns.
| Third, it creates axis tick marks at nice round numbers and labels them accordingly. Fourth,
| it uses the other defaults supplied in plot().

# Note that 'plot' is short for scatterplot.

?plot
plot(x = cars$speed, y = cars$dist)
plot(dist ~ speed, cars)
plot(x = cars$dist, y = cars$speed)
plot(speed ~ dist, cars)

plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")

plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")


plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)

data(mtcars)
dim(mtcars)

?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
